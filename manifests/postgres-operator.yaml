apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-operator
  namespace: postgres-operator

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: postgres-operator
rules:
  # all verbs allowed for custom operator resources
  - apiGroups:
      - acid.zalan.do
    resources:
      - postgresqls
      - postgresqls/status
      - operatorconfigurations
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
  # to create or get/update CRDs when starting up
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - get
      - patch
      - update
  # to read configuration from ConfigMaps
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
  # to manage endpoints which are also used by Patroni
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
  # to CRUD secrets for database access
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - update
      - delete
      - get
  # to check nodes for node readiness label
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
  # to read or delete existing PVCs. Creation via StatefulSet
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
    verbs:
      - delete
      - get
      - list
    # to read existing PVs. Creation should be done via dynamic provisioning
  - apiGroups:
      - ""
    resources:
      - persistentvolumes
    verbs:
      - get
      - list
      - update # only for resizing AWS volumes
  # to watch Spilo pods and do rolling updates. Creation via StatefulSet
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - get
      - list
      - watch
      - update
      - patch
  # to resize the filesystem in Spilo pods when increasing volume size
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
  # to CRUD services to point to Postgres cluster instances
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - create
      - delete
      - get
      - patch
      - update
  # to CRUD the StatefulSet which controls the Postgres cluster instances
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
  # to CRUD cron jobs for logical backups
  - apiGroups:
      - batch
    resources:
      - cronjobs
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
  # to get namespaces operator resources can run in
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  # to define PDBs. Update happens via delete/create
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - create
      - delete
      - get
  # to create ServiceAccounts in each namespace the operator watches
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - get
      - create
  # to create role bindings to the postgres-pod service account
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - rolebindings
    verbs:
      - get
      - create
  # to grant privilege to run privileged pods
  - apiGroups:
      - extensions
    resources:
      - podsecuritypolicies
    resourceNames:
      - privileged
    verbs:
      - use

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: postgres-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: postgres-operator
subjects:
  - kind: ServiceAccount
    name: postgres-operator
    namespace: postgres-operator

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: postgres-pod
rules:
  # Patroni needs to watch and manage endpoints
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - update
      - watch
  # Patroni needs to watch pods
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - patch
      - update
      - watch
  # to let Patroni create a headless service
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - create
  # to run privileged pods
  - apiGroups:
      - extensions
    resources:
      - podsecuritypolicies
    resourceNames:
      - privileged
    verbs:
      - use
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-operator
  namespace: postgres-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      name: postgres-operator
  template:
    metadata:
      labels:
        name: postgres-operator
    spec:
      serviceAccountName: postgres-operator
      containers:
        - name: postgres-operator
          image: docker.io/flanksource/postgres-operator:{{.postgresOperator.version}}
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 250Mi
            limits:
              cpu: 500m
              memory: 500Mi
          securityContext:
            runAsUser: 1000
            runAsNonRoot: true
            readOnlyRootFilesystem: true
          env:
            - name: POSTGRES_OPERATOR_CONFIGURATION_OBJECT
              value: default

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-operator
  namespace: postgres-operator
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    name: postgres-operator
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-operator-cluster-environment
  namespace: postgres-operator
data:
  AWS_ACCESS_KEY_ID: "{{ .s3.access_key | base64.Encode }}"
  AWS_SECRET_ACCESS_KEY: "{{ .s3.secret_key | base64.Encode }}"
  AWS_ENDPOINT: "{{ .s3.endpoint | base64.Encode }}"
  AWS_ENDPOINT_URL: '{{ hasPrefix .s3.endpoint "http" | ternary (print .s3.endpoint) (print "https://" .s3.endpoint) | base64.Encode }}'
  AWS_REGION: "{{ .s3.region | base64.Encode }}"
  AWS_S3_FORCE_PATH_STYLE: '{{ .s3.usePathStyle | default "true" | base64.Encode }}'
  LOGICAL_BACKUP_S3_BUCKET: '{{ .postgresOperator.backupBucket | base64.Encode }}'
  BACKUP_IMAGE: '{{ .postgresOperator.backupImage | base64.Encode }}'

  # NOTE: BACKUP_PASSWORD CAN'T BE UPDATED ONCE RESTIC HAS BEEN INITIALIZED. YOU WON'T BE ABLE TO RESTORE BACKUP DATA IF YOU LOSE THE RESTIC PASSWORD
  BACKUP_PASSWORD: '{{ or (kget "secret/postgres-operator/postgres-operator-cluster-environment" "BACKUP_PASSWORD") .postgresOperator.backupPassword | default (random.AlphaNum 22) | base64.Encode }}'

  # Backup Retention
  BACKUP_RETENTION_KEEP_LAST: '{{ .postgresOperator.backupRetention.keepLast | default "" | base64.Encode }}'
  BACKUP_RETENTION_KEEP_HOURLY: '{{ .postgresOperator.backupRetention.keepHourly | default "" | base64.Encode }}'
  BACKUP_RETENTION_KEEP_DAILY: '{{ .postgresOperator.backupRetention.keepDaily | default "" | base64.Encode }}'
  BACKUP_RETENTION_KEEP_WEEKLY: '{{ .postgresOperator.backupRetention.keepWeekly | default "" | base64.Encode }}'
  BACKUP_RETENTION_KEEP_MONTHLY: '{{ .postgresOperator.backupRetention.keepMonthly | default "" | base64.Encode }}'
  BACKUP_RETENTION_KEEP_YEARLY: '{{ .postgresOperator.backupRetention.keepYearly | default "" | base64.Encode }}'
